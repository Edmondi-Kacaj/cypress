version: 2.1

defaults: &defaults
  parallelism: 1
  working_directory: ~/cypress
  parameters:
    executor:
      type: executor
      default: cy-doc
  executor: <<parameters.executor>>
  environment:
    ## set specific timezone
    TZ: "/usr/share/zoneinfo/America/New_York"

    ## store artifacts here
    CIRCLE_ARTIFACTS: /tmp/artifacts

    ## set so that e2e tests are consistent
    COLUMNS: 100
    LINES: 24

executors:
  # the Docker image with Cypress dependencies and Chrome browser
  cy-doc:
    docker:
      - image: cypress/browsers:node12.18.3-chrome83-ff77
    environment:
      PLATFORM: linux

  # Docker image with non-root "node" user
  non-root-docker-user:
    docker:
      - image: cypress/browsers:node12.18.3-chrome83-ff77
        user: node
    environment:
      PLATFORM: linux

commands:
  install-required-node:
    # https://discuss.circleci.com/t/switch-nodejs-version-on-machine-executor-solved/26675/2
    description: Install Node version matching .node-version
    steps:
      - run:
          name: Install NVM
          # TODO: determine why we get the missing .nvmrc file error
          command: |
            export NODE_VERSION=$(cat .node-version)
            echo "Installing Node $NODE_VERSION"
            cp .node-version .nvmrc
            curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.35.3/install.sh | bash
      - run:
          # https://github.com/nvm-sh/nvm#nvmrc
          name: Install Node
          command: |
            . ./scripts/load-nvm.sh
            echo "before nvm install"
            nvm install
            echo "before nvm use"
            nvm use
            echo "before nvm alias default"
            nvm alias default
            node --version

  install-latest-chrome:
    description: Install latest Google Chrome (stable)
    parameters:
      browser:
        default: "electron"
        description: browser shortname to target
        type: string
    steps:
      - run:
          name: Install latest Google Chrome (stable)
          command: |
            if [ <<parameters.browser>> == "chrome" ]; then
              echo "**** Running Chrome tests.  Installing latest stable version of Google Chrome. ****"
              apt-get update
              apt-get install google-chrome-stable -y
              echo "**** Location of Google Chrome Installation: "`which google-chrome`" ****"
              echo "**** Google Chrome Version: "`google-chrome --version`" ****"
            else
              echo "**** Not updating Chrome. Running tests in '<<parameters.browser>>' ****"
            fi

  post-install-comment:
    description: Post GitHub comment with a blurb on how to install pre-release version
    steps:
      - run: ls -la
      - run: ls -la binary-url.json npm-package-url.json
      - run: cat binary-url.json
      - run: cat npm-package-url.json
      - run:
          name: Post pre-release install comment
          command: |
            node scripts/add-install-comment.js \
              --npm npm-package-url.json \
              --binary binary-url.json

  verify-mocha-results:
    description: Double-check that Mocha tests ran as expected.
    parameters:
      expectedResultCount:
        description: The number of result files to expect, ie, the number of Mocha test suites that ran.
        type: integer
        ## by default, assert that at least 1 test ran
        default: 0
    steps:
      - run: yarn verify:mocha:results <<parameters.expectedResultCount>>

  clone-repo-and-checkout-release-branch:
    description: |
      Clones an external repo and then checks out the branch that matches the next version otherwise uses 'master' branch.
    parameters:
      repo:
        description: "Name of the github repo to clone like: cypress-example-kitchensink"
        type: string
    steps:
      - attach_workspace:
          at: ~/
      - check-conditional-ci
      - run:
          name: "Cloning test project: <<parameters.repo>>"
          command: |
            git clone --depth 1 --no-single-branch https://github.com/cypress-io/<<parameters.repo>>.git /tmp/<<parameters.repo>>
            cd /tmp/<<parameters.repo>> && (git checkout $(node ./scripts/get-next-version) || true)

  check-conditional-ci:
    description: Halt CI if the package that this job corresponds to is unchanged
    steps:
      - run:
          name: Check if job should run
          command: node scripts/check-conditional-ci.js

  build-binary:
    steps:
      - run:
          name: Check environment variables before code sign (if on Mac)
          # NOTE
          # our Mac code sign works via electron-builder
          # by default, electron-builder will NOT sign app built in a pull request
          # even our internal one (!)
          # Usually this is not a problem, since we only build and test binary
          # built on "develop" and "master" branches
          # but if you need to really build and sign a Mac binary in a PR
          # set variable CSC_FOR_PULL_REQUEST=true
          command: |
            set -e
            if [[ "$OSTYPE" == "darwin"* ]]; then
              if [ -z "$CSC_LINK" ]; then
                echo "Need to provide environment variable CSC_LINK"
                  echo "with base64 encoded certificate .p12 file"
                exit 1
              fi
              if [ -z "$CSC_KEY_PASSWORD" ]; then
                echo "Need to provide environment variable CSC_KEY_PASSWORD"
                  echo "with password for unlocking certificate .p12 file"
                exit 1
              fi
            else
              echo "Not Mac platform, skipping code sign setup"
            fi
      - install-required-node
      - run:
          environment:
            DEBUG: electron-builder,electron-osx-sign*
          # notarization on Mac can take a while
          no_output_timeout: "45m"
          command: |
            . ./scripts/load-nvm.sh
            node --version
            yarn binary-build --platform $PLATFORM --version $(node ./scripts/get-next-version.js)
      - run:
          name: Zip the binary
          command: |
            . ./scripts/load-nvm.sh
            yarn binary-zip --platform $PLATFORM

  upload-binary:
    steps:
      - run:
          name: upload unique binary
          command: |
            node scripts/binary.js upload-unique-binary \
              --file cypress.zip \
              --version $(node -p "require('./package.json').version")
      - run: cat binary-url.json

jobs:
  npm-react-all:
    working_directory: ~/cypress
    parameters:
      executor:
        type: executor
        default: cy-doc
    executor: <<parameters.executor>>
    environment:
      ## set specific timezone
      TZ: "/usr/share/zoneinfo/America/New_York"
    parallelism: 4
    steps: 
      - run: date +"%d-%m-%y %H:%M:%S" && sleep 5 && echo "OK"
      - run: date +"%d-%m-%y %H:%M:%S" && sleep 5 && echo "OK"
      - run: date +"%d-%m-%y %H:%M:%S" && sleep 5 && echo "OK"

  build:
    <<: *defaults
    steps:
      - checkout
      - install-required-node
      - run:
          name: Print working folder
          command: echo $PWD
      - run:
          name: print global yarn cache path
          command: echo $(yarn global bin)
      - run:
          name: print Node version
          command: |
            . ./scripts/load-nvm.sh
            echo "nvm use default"
            nvm use default
            node -v
      - run:
          name: print yarn version
          command: yarn -v
      - run:
          name: check Node version
          command: |
            . ./scripts/load-nvm.sh
            yarn check-node-version

      ## make sure the TERM is set to 'xterm' in node (Linux only)
      ## else colors (and tests) will fail
      ## See the following information
      ##   * http://andykdocs.de/development/Docker/Fixing+the+Docker+TERM+variable+issue
      ##   * https://unix.stackexchange.com/questions/43945/whats-the-difference-between-various-term-variables
      - run:
          name: Check terminal
          command: |
            . ./scripts/load-nvm.sh
            yarn check-terminal

      - run:
          name: Stop .only
          command: |
            . ./scripts/load-nvm.sh
            yarn stop-only-all

      - restore_cache:
          name: Restore yarn cache
          key: v{{ .Environment.CACHE_VERSION }}-{{ arch }}-deps-root-{{ checksum "yarn.lock" }}

      # show what is already cached globally
      - run: ls $(yarn global bin)
      - run: ls $(yarn global bin)/../lib/node_modules

      # try several times, because flaky NPM installs ...
      - run:
          name: install and build
          command: |
            . ./scripts/load-nvm.sh
            yarn --frozen-lockfile || yarn --frozen-lockfile
            yarn build-prod
      - run:
          name: Top level packages
          command: yarn list --depth=0 || true

      - save_cache:
          name: Save yarn cache
          key: v{{ .Environment.CACHE_VERSION }}-{{ arch }}-deps-root-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache

      ## save entire folder as artifact for other jobs to run without reinstalling
      - persist_to_workspace:
          root: ~/
          paths:
            - cypress
            - .ssh

  npm-react:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/
      - check-conditional-ci
      - run:
          name: Build
          command: yarn workspace @cypress/react build
      - run:
          name: Run tests
          command: yarn workspace @cypress/react test
      - persist_to_workspace:
          root: ~/
          paths: cypress/npm/react

  npm-react-e2e-example:
    <<: *defaults
    description: Run react component testing end-to-end examples
    parameters:
      executor:
        description: Executor name to use
        type: executor
        default: cy-doc
      path:
        description: relative to npm/react path of example
        type: string
    steps:
      - attach_workspace:
          at: ~/
      - check-conditional-ci
      - restore_cache:
          name: Restore Cache
          keys:
            - yarn-packages-{{ checksum "npm/react/<<parameters.path>>/yarn.lock" }}
      - run:
          name: Install Dependencies
          command: yarn install --frozen-lockfile
          working_directory: npm/react/<<parameters.path>>
      - save_cache:
          name: Save Cache
          key: yarn-packages-{{ checksum "npm/react/<<parameters.path>>/yarn.lock" }}
          paths:
            - ~/.cache
      - run:
          name: Run e2e example tests
          command: yarn test
          working_directory: npm/react/<<parameters.path>>

  create-build-artifacts:
    <<: *defaults
    shell: /bin/bash --login
    steps:
      - attach_workspace:
          at: ~/
      - check-conditional-ci
      - build-binary
      - run:
          name: Check current branch to persist artifacts
          command: |
            if [[ "$CIRCLE_BRANCH" != "develop" && "$CIRCLE_BRANCH" != "fix-next-version" ]]; then
              echo "Not uploading artifacts or posting install comment for this branch."
              circleci-agent step halt
            fi
      - upload-binary
      - post-install-comment

linux-workflow: &linux-workflow
  jobs:
    - build
    - npm-react:
        requires:
          - build

    - npm-react-all

    - npm-react-e2e-example:
        name: npm-react-axe
        path: examples/a11y
        requires:
          - npm-react
    - npm-react-e2e-example:
        name: npm-react-next
        path: examples/nextjs
        requires:
          - npm-react
    - npm-react-e2e-example:
        name: npm-react-cra
        path: examples/react-scripts
        requires:
          - npm-react
    - npm-react-e2e-example:
        name: npm-react-cra-folder
        path: examples/react-scripts-folder
        requires:
          - npm-react
    - npm-react-e2e-example:
        name: npm-react-rollup
        path: examples/rollup
        requires:
          - npm-react
    - npm-react-e2e-example:
        name: npm-react-sass-ts
        path: examples/sass-and-ts
        requires:
          - npm-react
    - npm-react-e2e-example:
        name: npm-react-snapshots
        path: examples/snapshots
        requires:
          - npm-react
    - npm-react-e2e-example:
        name: npm-react-tailwind
        path: examples/tailwind
        requires:
          - npm-react
    # Requires Applitools key in the env
    # - npm-react-e2e-example:
    #     name: React + Applitools component testing
    #     path: examples/visual-testing-with-applitools
    #     requires:
    #       - npm-react
    - npm-react-e2e-example:
        name: npm-react-percy
        path: examples/visual-testing-with-percy
        requires:
          - npm-react
    # Requires Happo api key in the env vars
    # - npm-react-e2e-example:
    #     name: React + Happo component testing
    #     path: examples/visual-testing-with-happo
    #     requires:
    #       - npm-react
    - npm-react-e2e-example:
        name: npm-react-webpack-file
        path: examples/webpack-file
        requires:
          - npm-react
    - npm-react-e2e-example:
        name: npm-react-webpack-options
        path: examples/webpack-options
        requires:
          - npm-react

workflows:
  linux:
    <<: *linux-workflow
