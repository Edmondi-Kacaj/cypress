version: 2.1

defaults: &defaults
  parallelism: 1
  working_directory: ~/cypress
  parameters:
    executor:
      type: executor
      default: cy-doc
  executor: <<parameters.executor>>
  environment:
    ## set specific timezone
    TZ: "/usr/share/zoneinfo/America/New_York"

    ## store artifacts here
    CIRCLE_ARTIFACTS: /tmp/artifacts

    ## set so that e2e tests are consistent
    COLUMNS: 100
    LINES: 24

jobs:
  ## code checkout and yarn installs
  build:
    <<: *defaults
    steps:
      - checkout
      - install-required-node
      - run:
          name: Print working folder
          command: echo $PWD
      - run:
          name: print global yarn cache path
          command: echo $(yarn global bin)
      - run:
          name: print Node version
          command: |
            . ./scripts/load-nvm.sh
            echo "nvm use default"
            nvm use default
            node -v
      - run:
          name: print yarn version
          command: yarn -v
      - run:
          name: check Node version
          command: |
            . ./scripts/load-nvm.sh
            yarn check-node-version

      ## make sure the TERM is set to 'xterm' in node (Linux only)
      ## else colors (and tests) will fail
      ## See the following information
      ##   * http://andykdocs.de/development/Docker/Fixing+the+Docker+TERM+variable+issue
      ##   * https://unix.stackexchange.com/questions/43945/whats-the-difference-between-various-term-variables
      - run:
          name: Check terminal
          command: |
            . ./scripts/load-nvm.sh
            yarn check-terminal

      - run:
          name: Stop .only
          command: |
            . ./scripts/load-nvm.sh
            yarn stop-only-all

      - restore_cache:
          name: Restore yarn cache
          key: v{{ .Environment.CACHE_VERSION }}-{{ arch }}-deps-root-{{ checksum "yarn.lock" }}

      # show what is already cached globally
      - run: ls $(yarn global bin)
      - run: ls $(yarn global bin)/../lib/node_modules

      # try several times, because flaky NPM installs ...
      - run:
          name: install and build
          command: |
            . ./scripts/load-nvm.sh
            yarn --frozen-lockfile || yarn --frozen-lockfile
            yarn build-prod
      - run:
          name: Top level packages
          command: yarn list --depth=0 || true

      - store-npm-logs

      - save_cache:
          name: Save yarn cache
          key: v{{ .Environment.CACHE_VERSION }}-{{ arch }}-deps-root-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache

      ## save entire folder as artifact for other jobs to run without reinstalling
      - persist_to_workspace:
          root: ~/
          paths:
            - cypress
            - .ssh

  npm-react:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/
      - check-conditional-ci
      - run:
          name: Build
          command: yarn workspace @cypress/react build
      - run:
          name: Run tests
          command: yarn workspace @cypress/react test
      - store-npm-logs
      - persist_to_workspace:
          root: ~/
          paths: cypress/npm/react

  npm-react-e2e-example:
    <<: *defaults
    description: Run react component testing end-to-end examples
    parameters:
      executor:
        description: Executor name to use
        type: executor
        default: cy-doc
      path:
        description: relative to npm/react path of example
        type: string
    steps:
      - attach_workspace:
          at: ~/
      - check-conditional-ci
      - restore_cache:
          name: Restore Cache
          keys:
            - yarn-packages-{{ checksum "npm/react/<<parameters.path>>/yarn.lock" }}
      - run:
          name: Install Dependencies
          command: yarn install --frozen-lockfile
          working_directory: npm/react/<<parameters.path>>
      - save_cache:
          name: Save Cache
          key: yarn-packages-{{ checksum "npm/react/<<parameters.path>>/yarn.lock" }}
          paths:
            - ~/.cache
      - run:
          name: Run e2e example tests
          command: yarn test
          working_directory: npm/react/<<parameters.path>>

linux-workflow: &linux-workflow
  jobs:
    - npm-react:
        requires:
          - build
    # Run tests for end-to-end react component tests examples
    - npm-react-e2e-example:
        name: npm-react-axe
        path: examples/a11y
        requires:
          - npm-react
    - npm-react-e2e-example:
        name: npm-react-next
        path: examples/nextjs
        requires:
          - npm-react
    - npm-react-e2e-example:
        name: npm-react-cra
        path: examples/react-scripts
        requires:
          - npm-react
    - npm-react-e2e-example:
        name: npm-react-cra-folder
        path: examples/react-scripts-folder
        requires:
          - npm-react
    - npm-react-e2e-example:
        name: npm-react-rollup
        path: examples/rollup
        requires:
          - npm-react
    - npm-react-e2e-example:
        name: npm-react-sass-ts
        path: examples/sass-and-ts
        requires:
          - npm-react
    - npm-react-e2e-example:
        name: npm-react-snapshots
        path: examples/snapshots
        requires:
          - npm-react
    - npm-react-e2e-example:
        name: npm-react-tailwind
        path: examples/tailwind
        requires:
          - npm-react
    # Requires Applitools key in the env
    # - npm-react-e2e-example:
    #     name: React + Applitools component testing
    #     path: examples/visual-testing-with-applitools
    #     requires:
    #       - npm-react
    - npm-react-e2e-example:
        name: npm-react-percy
        path: examples/visual-testing-with-percy
        requires:
          - npm-react
    # Requires Happo api key in the env vars
    # - npm-react-e2e-example:
    #     name: React + Happo component testing
    #     path: examples/visual-testing-with-happo
    #     requires:
    #       - npm-react
    - npm-react-e2e-example:
        name: npm-react-webpack-file
        path: examples/webpack-file
        requires:
          - npm-react
    - npm-react-e2e-example:
        name: npm-react-webpack-options
        path: examples/webpack-options
        requires:
          - npm-react

workflows:
  linux:
    <<: *linux-workflow
